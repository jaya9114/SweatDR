import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepPurple500,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          shadowColor: colorScheme.primary,
          elevation: 3,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.deepPurpleA100.withOpacity(0.2),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 140,
        space: 140,
        color: appTheme.blueGray50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 14.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray20001,
          fontSize: 11.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.deepPurple500,
          fontSize: 51.fSize,
          fontFamily: 'Alice',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.deepPurple500,
          fontSize: 40.fSize,
          fontFamily: 'Alice',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.secondaryContainer.withOpacity(1),
          fontSize: 34.fSize,
          fontFamily: 'Catamaran',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray600,
          fontSize: 12.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray200,
          fontSize: 11.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 14.fSize,
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3D473B85),
    primaryContainer: Color(0XFFE0E0E0),
    secondaryContainer: Color(0X7C39434F),

    // Error colors
    errorContainer: Color(0XFF455A64),
    onError: Color(0XFF263238),

    // On colors(text colors)
    onPrimary: Color(0XD8FFFFFF),
    onPrimaryContainer: Color(0XFF202326),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue400 => Color(0XFF499DF5);
  Color get blue600 => Color(0XFF1B85F3);
  Color get blue800 => Color(0XFF1268CC);
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFC6CED9);
  Color get blueGray200 => Color(0XFFB3BECD);
  Color get blueGray20001 => Color(0XFFA0AEC0);
  Color get blueGray400 => Color(0XFF808B9A);
  Color get blueGray50 => Color(0XFFECEFF2);
  Color get blueGray600 => Color(0XFF606873);
  Color get blueGray800 => Color(0XFF393066);
  Color get blueGray80001 => Color(0XFF37474F);

  // Cyan
  Color get cyan600 => Color(0XFF00A9B9);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFDAD4FC);
  Color get deepPurple300 => Color(0XFF8873F4);
  Color get deepPurple500 => Color(0XFF6152AD);
  Color get deepPurpleA100 => Color(0XFFAFA1F8);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray300 => Color(0XFFD9DFE6);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF9E6767);
  Color get gray700 => Color(0XFF874C4C);
  Color get gray900 => Color(0XFF222222);

  // Orange
  Color get orangeA200 => Color(0XFFFF974A);

  // Purple
  Color get purple300 => Color(0XFFBA68C8);

  // Red
  Color get red500 => Color(0XFFF8312F);

  // Teal
  Color get teal300 => Color(0XFF4CD1BC);
  Color get teal400 => Color(0XFF31AA7A);
  Color get teal50 => Color(0XFFD8F7EA);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
